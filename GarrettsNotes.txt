NOTES AND CODE FROM PREVIOUS VIDEOS I DON'T WANT TO LOSE:

Video 1-5 Member Variables:
	int vx = 0;
	int vy = 0;
	int gb = 255;
	bool shapeIsChanged = false;
	bool inhibitUp = false;
	bool inhibitDown = false;
	bool inhibitLeft = false;
	bool inhibitRight = false;

	//{
//	if (wnd.kbd.KeyIsPressed(VK_RIGHT)) //If a variable is redeclared within a function, the one in the function takes precident.
//	{
//		if (inhibitRight)
//		{
//		}
//		else
//		{
//			x_mobile = x_mobile + 1;
//			inhibitRight = true;
//		}
//	}
//	else
//	{
//		inhibitRight = false;
//	}
//
//	if (wnd.kbd.KeyIsPressed(VK_LEFT))
//	{
//		if (inhibitLeft)
//		{
//		}
//		else
//		{
//			x_mobile = x_mobile - 1;
//			inhibitLeft = true;
//		}
//	}
//	else
//	{
//		inhibitLeft = false;
//	}
//
//
//	if (wnd.kbd.KeyIsPressed(VK_UP))
//	{
//		if (inhibitUp)
//		{
//		}
//		else
//		{
//			y_mobile = y_mobile - 1;
//			inhibitUp = true;
//		}
//	}
//	else
//	{
//		inhibitUp = false;
//	}
//
//	if (wnd.kbd.KeyIsPressed(VK_DOWN))
//	{
//		if (inhibitDown)
//		{
//		}
//		else
//		{
//			y_mobile = y_mobile + 1;
//			inhibitDown = true;
//		}
//	}
//	else
//	{
//		inhibitDown = false;
//	}
//
//	x = x + vx;
//	y = y + vy;
//
//	if (x + 5 >= gfx.ScreenWidth)
//	{
//		x = gfx.ScreenWidth - 6;
//		vx = 0;
//	}
//
//	if (x - 5 < 0)
//	{
//		x = 5;
//		vx = 0;
//	}
//
//	if (y + 5 >= gfx.ScreenHeight)
//	{
//		y = gfx.ScreenHeight - 6;
//		vy = 0;
//	}
//
//	if (y - 5 < 0)
//	{
//		y = 5;
//		vy = 0;
//	}
//
//	shapeIsChanged = false;
//	if (x > 200 || x < 300)
//	{
//		shapeIsChanged = true;
//	}
//
//	if (wnd.kbd.KeyIsPressed(VK_CONTROL))
//	{
//		gb = 0; //Green and Blue Values.
//	}
//
//	//shapeIsChanged = wnd.kbd.KeyIsPressed(VK_SHIFT);
//
//}

//if (shapeIsChanged) //Changes Shape of Crosshair
//{
//	gfx.PutPixel(-10 + x, y,255, gb, gb); //(X,Y,R,G,B)
//	gfx.PutPixel(-9 + x, y, 255, gb, gb);
//	gfx.PutPixel(-8 + x, y, 255, gb, gb);
//	gfx.PutPixel(8 + x, y,  255, gb, gb);
//	gfx.PutPixel(9 + x, y,  255, gb, gb);
//	gfx.PutPixel(10 + x, y, 255, gb, gb);
//	gfx.PutPixel(x,-10 + y, 255, gb, gb);
//	gfx.PutPixel(x, -9 + y, 255, gb, gb);
//	gfx.PutPixel(x, -8 + y, 255, gb, gb);
//	gfx.PutPixel(x, 8 + y,  255, gb, gb);
//	gfx.PutPixel(x, 9 + y,  255, gb, gb);
//	gfx.PutPixel(x, 10 + y, 255, gb, gb);
//}
//else
//{
//	gfx.PutPixel(-5 + x, y, 255, gb, gb); //(X,Y,R,G,B)
//	gfx.PutPixel(-4 + x, y, 255, gb, gb);
//	gfx.PutPixel(-3 + x, y, 255, gb, gb);
//	gfx.PutPixel(3 + x, y, 255, gb, gb);
//	gfx.PutPixel(4 + x, y, 255, gb, gb);
//	gfx.PutPixel(5 + x, y, 255, gb, gb);
//	gfx.PutPixel(x, -5 + y, 255, gb, gb);
//	gfx.PutPixel(x, -4 + y, 255, gb, gb);
//	gfx.PutPixel(x, -3 + y, 255, gb, gb);
//	gfx.PutPixel(x, 3 + y, 255, gb, gb);
//	gfx.PutPixel(x, 4 + y, 255, gb, gb);
//	gfx.PutPixel(x, 5 + y, 255, gb, gb);
//}

//gfx.PutPixel(-10 + x, y, 255, gb, gb); //(X,Y,R,G,B)
//gfx.PutPixel(-9 + x, y, 255, gb, gb);
//gfx.PutPixel(-8 + x, y, 255, gb, gb);
//gfx.PutPixel(8 + x, y, 255, gb, gb);
//gfx.PutPixel(9 + x, y, 255, gb, gb);
//gfx.PutPixel(10 + x, y, 255, gb, gb);
//gfx.PutPixel(x, -10 + y, 255, gb, gb);
//gfx.PutPixel(x, -9 + y, 255, gb, gb);
//gfx.PutPixel(x, -8 + y, 255, gb, gb);
//gfx.PutPixel(x, 8 + y, 255, gb, gb);
//gfx.PutPixel(x, 9 + y, 255, gb, gb);
//gfx.PutPixel(x, 10 + y, 255, gb, gb);

Pts 5-7:

void Game::UpdateModel()
{
	if (wnd.kbd.KeyIsPressed(VK_RIGHT))
	{
		x_mobile = x_mobile + 1;
	}

	if (wnd.kbd.KeyIsPressed(VK_LEFT))
	{
		x_mobile = x_mobile - 1;
	}

	if (wnd.kbd.KeyIsPressed(VK_DOWN))
	{
		y_mobile = y_mobile + 1;
	}

	if (wnd.kbd.KeyIsPressed(VK_UP))
	{
		y_mobile = y_mobile - 1;
	}

	x_mobile = ClampScreenX(x_mobile);
	y_mobile = ClampScreenY(y_mobile);

	colliding = OverlapTest(x_fixed0, y_fixed0, x_mobile, y_mobile) || 
		OverlapTest(x_fixed1, y_fixed1, x_mobile, y_mobile) || 
		OverlapTest(x_fixed2, y_fixed2, x_mobile, y_mobile) || 
		OverlapTest(x_fixed3, y_fixed3, x_mobile, y_mobile);

}

//Variables come into existence when declared and end at the end of the function they're declared in. (As with other languages.) This is the scope. Local variables WILL override the Header variables.
void Game::ComposeFrame()
{
	DrawBox(x_fixed0, y_fixed0, 0, 255, 0);
	DrawBox(x_fixed1, y_fixed1, 0, 255, 0);
	DrawBox(x_fixed2, y_fixed2, 0, 255, 0);
	DrawBox(x_fixed3, y_fixed3, 0, 255, 0);

	if (colliding)
	{
		DrawBox(x_mobile, y_mobile, 255, 0, 0);
	}
	else
	{
		DrawBox(x_mobile, y_mobile, 255, 255, 255);
	}

}

// If you want to draw multiple boxes, add parameters to change!
void Game::DrawBox(int x, int y, int r, int g, int b) 
{
	gfx.PutPixel(-5 + x, -4 + y, r, g, b);
	gfx.PutPixel(-5 + x, -3 + y, r, g, b);
	gfx.PutPixel(-4 + x, -5 + y, r, g, b);
	gfx.PutPixel(-3 + x, -5 + y, r, g, b);
	gfx.PutPixel(-5 + x, 5 + y, r, g, b);
	gfx.PutPixel(-5 + x, 4 + y, r, g, b);
	gfx.PutPixel(-5 + x, 3 + y, r, g, b);
	gfx.PutPixel(-4 + x, 5 + y, r, g, b);
	gfx.PutPixel(-3 + x, 5 + y, r, g, b);
	gfx.PutPixel(5 + x, -5 + y, r, g, b);
	gfx.PutPixel(5 + x, -4 + y, r, g, b);
	gfx.PutPixel(5 + x, -3 + y, r, g, b);
	gfx.PutPixel(4 + x, -5 + y, r, g, b);
	gfx.PutPixel(3 + x, -5 + y, r, g, b);
	gfx.PutPixel(5 + x, 5 + y, r, g, b);
	gfx.PutPixel(5 + x, 4 + y, r, g, b);
	gfx.PutPixel(5 + x, 3 + y, r, g, b);
	gfx.PutPixel(4 + x, 5 + y, r, g, b);
	gfx.PutPixel(3 + x, 5 + y, r, g, b);
}

bool Game::OverlapTest(int box0x, int box0y, int box1x, int box1y)
{

	const int left_box0 = box0x - 5;
	const int right_box0 = box0x + 5;
	const int top_box0 = box0y - 5;
	const int bottom_box0 = box0y + 5;

	const int left_box1 = box1x - 5;
	const int right_box1 = box1x + 5;
	const int top_box1 = box1y - 5;
	const int bottom_box1 = box1y + 5;

	return
		left_box0 <= right_box1 &&
		right_box0 >= left_box1 &&
		top_box0 <= bottom_box1 &&
		bottom_box0 >= top_box1;
}

int Game::ClampScreenX(int x)
{
	const int left = x - 5;
	const int right = x + 5;
	if (left < 0)
	{
		return 5;
	}
	else if (right >= gfx.ScreenWidth)
	{
		return gfx.ScreenWidth - 6;
	}
	else
	{
		return x;
	}
}

int Game::ClampScreenY(int y)
{
	const int top = y - 5;
	const int bottom = y + 5;
	if (top < 0)
	{
		return 5;
	}
	else if (bottom >= gfx.ScreenWidth)
	{
		return gfx.ScreenWidth - 6;
	}
	else
	{
		return y;
	}
}
	void DrawBox(int x, int y, int r, int g, int b);
	bool OverlapTest(int box0x, int box0y, int box1x, int box1y);
	int ClampScreenX(int x);
	int ClampScreenY(int y);
	/********************************/
private:
	MainWindow& wnd; //Data members
	Graphics gfx;
	/********************************/
	/*  User Variables              */
	int x_fixed0 = 200;
	int y_fixed0 = 200;
	int x_fixed1 = 210;
	int y_fixed1 = 200;
	int x_fixed2 = 215;
	int y_fixed2 = 200;
	int x_fixed3 = 230;
	int y_fixed3 = 200;
	int x_mobile = 400;
	int y_mobile = 300;
	int colliding = false;
	/********************************/
